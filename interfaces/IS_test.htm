<html>
<head>
  <script src='interface.lib.js'></script>
</head>
<body>
  <script>
    // The Interface.js simple server outputs all OSC messages to port 8082. See the README for more information.
    
    // You can manually send OSC messages with the following syntax:
    // Interface.OSC.send('/test', 'f', 5.7);
    
    panel = Interface.Panel.create();
    
    // send a message to the address '/button'
    a = Interface.Button.create({
      x:0, y:0,
      width:1, height:0.5,
      mode:'toggle',
      target:"osc",
      name:'button',
      address:'/button'
    })
    
    // send a message to the address '/slider'
    b = Interface.Slider.create({
      x:0, y:0.5,
      width:1, height:0.5,
      isVertical:false,
      target:"osc",
      name:'slider',
      address:'/slider'
    })
    panel.add( a, b );
    
    // override to process OSC messages. By default, if a message is received with the
    // same address as the key of one of the widgets (here /button and /slider) the value
    // of that widget will be set using the parameters of the received OSC message.
    
    // Interface.Communication.OSC._receive = function( msg ){ //(address, typetags, parameters ) {
      // console.log( msg )
      // console.log( msg["parameters"] )
      // b.value = msg['parameters']
    // }
    
    var device = {
      name:'mydevice',
      inputs:{},
      outputs:{}
    }
  
    Interface.Communication.Socket.onopen = function() {
      for( var i = 0; i < panel.children.length; i++ ) {
        var widget = panel.children[i]
        device.inputs[ widget.name ] = { min: widget.min, max:widget.max }
        device.outputs[ widget.name ] = { min: widget.min, max:widget.max }
      }
      
      Interface.Communication.Socket.send( JSON.stringify({ address:'/interface/ioManager/createDevice', values:[ device ] }) )
    }
    
  </script>
</body>
</html>